{"ast":null,"code":"import NextAuth from \"next-auth\";\nimport Providers from \"next-auth/providers\";\nconst options = {\n  site: process.env.SITE || \"http://localhost:3000\",\n  // Configure one or more authentication providers\n  providers: [Providers.Facebook({\n    clientId: process.env.FACEBOOK_ID,\n    clientSecret: process.env.FACEBOOK_SECRET\n  }) // ...add more providers here\n  ],\n  callbacks: {\n    signIn: async (user, account, profile) => {\n      const isAllowedToSignIn = true;\n\n      if (isAllowedToSignIn) {\n        return Promise.resolve(true);\n      } else {\n        // Return false to display a default error message\n        //   return Promise.resolve(false)\n        // You can also Reject this callback with an Error or with a URL:\n        // return Promise.reject(new Error('error message')) // Redirect to error page\n        return Promise.reject(\"http://localhost:3000\"); // Redirect to a URL\n      }\n    },\n    redirect: async (url, baseUrl) => {\n      return url.startsWith(baseUrl) ? Promise.resolve(url) : Promise.resolve(baseUrl);\n    },\n    session: async (session, user, sessionToken) => {\n      session.foo = \"bar\"; // Add property to session\n\n      return Promise.resolve(session);\n    }\n  },\n  events: {\n    signIn: async message => {\n      \"sei loggato\";\n    },\n    signOut: async message => {\n      \"sei sloggato\";\n    }\n  },\n  // A database is optional, but required to persist accounts in a database\n  database: process.env.DATABASE_URL\n};\nexport default ((req, res) => NextAuth(req, res, options));","map":{"version":3,"sources":["C:/Users/palla/Desktop/viola-melanzana/pages/api/auth/[...nextauth].js"],"names":["NextAuth","Providers","options","site","process","env","SITE","providers","Facebook","clientId","FACEBOOK_ID","clientSecret","FACEBOOK_SECRET","callbacks","signIn","user","account","profile","isAllowedToSignIn","Promise","resolve","reject","redirect","url","baseUrl","startsWith","session","sessionToken","foo","events","message","signOut","database","DATABASE_URL","req","res"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AAEA,MAAMC,OAAO,GAAG;AACdC,EAAAA,IAAI,EAAEC,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoB,uBADZ;AAEd;AACAC,EAAAA,SAAS,EAAE,CACTN,SAAS,CAACO,QAAV,CAAmB;AACjBC,IAAAA,QAAQ,EAAEL,OAAO,CAACC,GAAR,CAAYK,WADL;AAEjBC,IAAAA,YAAY,EAAEP,OAAO,CAACC,GAAR,CAAYO;AAFT,GAAnB,CADS,CAKT;AALS,GAHG;AAWdC,EAAAA,SAAS,EAAE;AACTC,IAAAA,MAAM,EAAE,OAAOC,IAAP,EAAaC,OAAb,EAAsBC,OAAtB,KAAkC;AACxC,YAAMC,iBAAiB,GAAG,IAA1B;;AACA,UAAIA,iBAAJ,EAAuB;AACrB,eAAOC,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP;AACD,OAFD,MAEO;AACL;AACA;AACA;AACA;AACA,eAAOD,OAAO,CAACE,MAAR,CAAe,uBAAf,CAAP,CALK,CAK2C;AACjD;AACF,KAZQ;AAaTC,IAAAA,QAAQ,EAAE,OAAOC,GAAP,EAAYC,OAAZ,KAAwB;AAChC,aAAOD,GAAG,CAACE,UAAJ,CAAeD,OAAf,IACHL,OAAO,CAACC,OAAR,CAAgBG,GAAhB,CADG,GAEHJ,OAAO,CAACC,OAAR,CAAgBI,OAAhB,CAFJ;AAGD,KAjBQ;AAkBTE,IAAAA,OAAO,EAAE,OAAOA,OAAP,EAAgBX,IAAhB,EAAsBY,YAAtB,KAAuC;AAC9CD,MAAAA,OAAO,CAACE,GAAR,GAAc,KAAd,CAD8C,CACzB;;AACrB,aAAOT,OAAO,CAACC,OAAR,CAAgBM,OAAhB,CAAP;AACD;AArBQ,GAXG;AAmCdG,EAAAA,MAAM,EAAE;AACNf,IAAAA,MAAM,EAAE,MAAOgB,OAAP,IAAmB;AACzB;AACD,KAHK;AAINC,IAAAA,OAAO,EAAE,MAAOD,OAAP,IAAmB;AAC1B;AACD;AANK,GAnCM;AA4Cd;AACAE,EAAAA,QAAQ,EAAE5B,OAAO,CAACC,GAAR,CAAY4B;AA7CR,CAAhB;AAgDA,gBAAe,CAACC,GAAD,EAAMC,GAAN,KAAcnC,QAAQ,CAACkC,GAAD,EAAMC,GAAN,EAAWjC,OAAX,CAArC","sourcesContent":["import NextAuth from \"next-auth\";\r\nimport Providers from \"next-auth/providers\";\r\n\r\nconst options = {\r\n  site: process.env.SITE || \"http://localhost:3000\",\r\n  // Configure one or more authentication providers\r\n  providers: [\r\n    Providers.Facebook({\r\n      clientId: process.env.FACEBOOK_ID,\r\n      clientSecret: process.env.FACEBOOK_SECRET,\r\n    }),\r\n    // ...add more providers here\r\n  ],\r\n\r\n  callbacks: {\r\n    signIn: async (user, account, profile) => {\r\n      const isAllowedToSignIn = true;\r\n      if (isAllowedToSignIn) {\r\n        return Promise.resolve(true);\r\n      } else {\r\n        // Return false to display a default error message\r\n        //   return Promise.resolve(false)\r\n        // You can also Reject this callback with an Error or with a URL:\r\n        // return Promise.reject(new Error('error message')) // Redirect to error page\r\n        return Promise.reject(\"http://localhost:3000\"); // Redirect to a URL\r\n      }\r\n    },\r\n    redirect: async (url, baseUrl) => {\r\n      return url.startsWith(baseUrl)\r\n        ? Promise.resolve(url)\r\n        : Promise.resolve(baseUrl);\r\n    },\r\n    session: async (session, user, sessionToken) => {\r\n      session.foo = \"bar\"; // Add property to session\r\n      return Promise.resolve(session);\r\n    },\r\n  },\r\n\r\n  events: {\r\n    signIn: async (message) => {\r\n      \"sei loggato\";\r\n    },\r\n    signOut: async (message) => {\r\n      \"sei sloggato\";\r\n    },\r\n  },\r\n\r\n  // A database is optional, but required to persist accounts in a database\r\n  database: process.env.DATABASE_URL,\r\n};\r\n\r\nexport default (req, res) => NextAuth(req, res, options);\r\n"]},"metadata":{},"sourceType":"module"}